// 20191003
// [BOJ. 15685] 드래곤 커브
#if 0
#include <stdio.h>
#define MAX	(101)
#define MAX_g	(10)

void Set_Data(void);
void Input(void);
void Cnt_Print(void);

int N;
int dir;
		   // 우, 상, 좌, 하
int dy[4] = { 0, -1, 0, 1 };
int dx[4] = { 1, 0, -1, 0 };
int cnt[11] = { 1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512 };// idx = 세대, 값 = 그 세대 때 더 필요한 선분 개수
int dir_cnt[1050];	// 0 ~ g세대까지 1선분을 그릴 때의 방향을 모두 저장해놓은 배열
int Board[MAX][MAX];

int main(void)
{
	Set_Data();
	Input();
	Cnt_Print();

	return 0;
}

void Set_Data(void)	// 각 세대에서 "추가적으로" 그리는(?) 선분의 개수를 저장해놓은 배열을 만들기 위함
{
	int i;

	cnt[0] = cnt[1] = 1;
	for (i = 2; i <= MAX_g; i++)
	{
		cnt[i] = 2 * cnt[i - 1];
	}
}

void Input(void)
{
	int x, y, d, g;
	int i, j, k;
	int order;

	scanf("%d", &N);
	for (i = 0; i < N; i++)
	{
		scanf("%d %d %d %d", &x, &y, &d, &g);

		order = 1;			// 0세대 ~ g세대까지 1선분씩 커브를 그릴 때의 방향들을 모두 저장해주기 위함
		Board[y][x] = 1;			// 0세대 시작점
		dir_cnt[order] = d;			// 0세대 시작 방향
		y += dy[d];		x += dx[d];	// 0세대 끝점 좌표
		Board[y][x] = 1;			// 0세대 끝점
		// 일단 디폴트로 0세대 때의 커브를 그려놓고 시작

		for (j = 1; j <= g; j++)	// 1세대 ~ g세대까지 커브를 그림
		{
			//printf("cnt[세대 = %d] = %d, ", j, cnt[j]);
			for (k = cnt[j]; k >= 1; k--)	// 방향이 거꾸로 들어감..;;
			{
				dir = ( dir_cnt[k] + 1 ) % 4;		// 일단 기존의 방향에서 반시계방향으로 꺾음
				y += dy[dir];		x += dx[dir];	// 그 방향만큼 1선분 그림
				dir_cnt[++order] = dir;				// 그리고 그 방향을 다시 저장해놓음 (거꾸로 꺼내야 함!)
				//printf("y = %d, x = %d\n", y, x);
				if (y < 0 || y > 100 || x < 0 || x > 100) continue;	// 근데 그 좌표가 격자 범위를 넘어서면 그리지 않음
				Board[y][x] = 1;	// 좌표가 격자의 범위를 넘지 않기 때문에 1선분을 그림 (사실 점 찍는 것ㅋ)
			}
			//printf("order = %d\n", order);
		}	
	}
}

void Cnt_Print(void)
{
	int i, j;
	int cnt = 0;

	/* 각 점(Board[i][j])을 기준으로 1*1만큼 범위 내에 있는 점의 값(드래곤 커브면 1, 아니면 0)을 
	   더했을 때 4인 경우가 "크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 것"*/
	for (i = 0; i < 100; i++)
	{
		for (j = 0; j < 100; j++)
		{
			if ( Board[i][j] + Board[i + 1][j] + Board[i][j + 1] + Board[i + 1][j + 1] == 4 )
			{
				cnt++;
			}
		}
	}

	printf("%d\n", cnt);
}
#endif





// 20191003
// [BOJ. 15686] 치킨 배달
#if 0
#include <stdio.h>
#define ABS(r)	( (r) < 0 ? -(r) : (r) )
#define MAX	(55)
#define INF	(987654321)

typedef struct
{
	int y, x;
}NODE;
NODE Choose_List[15];
NODE List[15];
NODE Zero;

void Input(void);
void DFS(int L, int idx);
int Calc_Chick_ST(void);
void Print_List(void);
void Print(void);

int N, M;
int City[MAX][MAX];
int Min_Chick_ST;
int order;

int main(void)
{
	Input();
	DFS(1, 1);
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	Zero.y = 0;		Zero.x = 0;
	Min_Chick_ST = INF;    	order = 1;
	scanf("%d %d", &N, &M);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &City[i][j]);
			if (City[i][j] == 2)
			{
				Choose_List[order].y = i;        Choose_List[order++].x = j;
			}
		}
	}
}

void DFS(int L, int idx)
{
	int i, r;

	if (L > M)
	{
		r = Calc_Chick_ST();
		if (Min_Chick_ST > r) Min_Chick_ST = r;
		return;
	}

	for (i = idx; i < order; i++)
	{
		List[L] = Choose_List[i];
		DFS(L + 1, i + 1);
		List[L] = Zero;
	}
}

int Calc_Chick_ST(void)
{
	int i, j, k;
	int min, check, sum = 0;

	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			if (City[i][j] == 1)
			{
				min = INF;
				for (k = 1; k <= M; k++)
				{
					check = ABS(List[k].y - i) + ABS(List[k].x - j);
					if (min > check) min = check;
				}
				sum += min;
			}
		}
	}
	return sum;
}

void Print(void)
{
	printf("%d\n", Min_Chick_ST);
}
#endif

// 광은님 ver로 다시 품!
#if 0
#include <stdio.h>
#define ABS(r)	( (r) < 0 ? -(r) : (r) )
// (r1 - r2)와 (c1 - c2)를 각각 ABS 매크로에 보내고, 그 결과값들을 합친 것이 치킨 거리!
#define MAX	(55)	// 범위는 넉넉하게 잡아야...
#define INF	(987654321)

typedef struct
{
	int y, x;
}NODE;
NODE Choose_List[15];	// 모든 치킨집의 좌표를 넣을 것
NODE House[MAX * MAX];

void Input(void);
void DFS(int L, int idx);
int Calc_Chick_ST(void);
void Print_List(void);
void Print(void);

int N, M;			// 도시의 크기, 폐업시키지 않을 치킨 집의 개수(선택 받은 치킨집!)
int City[MAX][MAX];	// 도시 좌표
int Min_Chick_ST;	// 치킨 거리의 최소값
int order;			// order - 1 = 총 치킨집의 수
int order_h;
int List[15];
int lcnt;

int main(void)
{
	Input();
	DFS(1, 1);
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	Min_Chick_ST = INF;
	order = 1;					// 모든 치킨집의 좌표를 Choose_List에 저장해주기 위한 index(1 ~ order - 1)
	order_h = 1;
	scanf("%d %d", &N, &M);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &City[i][j]);
			if (City[i][j] == 2)	// 일단 모든 치킨 집의 좌표를 저장해줌
			{
				Choose_List[order].y = i;
				Choose_List[order++].x = j;
			}
			else if (City[i][j] == 1)
			{
				House[order_h].y = i;
				House[order_h++].x = j;
			}
		}
	}
}

void DFS(int L, int idx)	// (order - 1)개의 치킨집 중 M개의 치킨집! (조합)
{
	int i, r;

	if (L > M)
	{
		r = Calc_Chick_ST();   // M개의 치킨집을 살린 상태에서 각 집 ~ 가장 가까운 치킨집(치킨 거리)의 합 리턴
		if (Min_Chick_ST > r) Min_Chick_ST = r;	// 치킨 거리 최소인 경우 갱신
		return;
	}

	for (i = idx; i < order; i++)
	{
		List[L] = i;

		DFS(L + 1, i + 1);

		List[L] = 0;
	}
}

// 모든 치킨집 중에서 M개의 치킨 집을 고른 상태로 이 함수에 들어옴!
int Calc_Chick_ST(void)
{
	int i, j;
	int min;
	int check, sum = 0;

	for (i = 1; i < order_h; i++)
	{
		min = INF;
		for (j = 1; j <= M; j++)
		{
			check = ABS(House[i].y - Choose_List[List[j]].y)
				    + ABS(House[i].x - Choose_List[List[j]].x);
			if (min > check) min = check;
		}
		sum += min;
	}

	return sum;
}

void Print(void)
{
	printf("%d\n", Min_Chick_ST);
}
#endif
