#pragma warning (disable: 4996)

// 맑은 정신으로 다시 한 번 더 풀어보기!! (20190922에!!)
// 20190918
// 7830. 마름모 찾기 D5
#if 01
#include <stdio.h>
#define MIN(a, b)  ( ((a) <= (b)) ? (a) : (b) )
#define MAX  (760)

typedef struct
{
	int y, x;
	int direction;
}NODE;
NODE Q[MAX * MAX * 10];

void Input(void);
void Init_Visit(void);
void Operation(void);
void InQ(int yy, int xx);
NODE * OutQ(void);
int BFS(int sy, int sx);
void Print_Visit(void);

int T;
int N, M;
int Map[MAX][MAX];
int Visit[MAX][MAX];
int Max;
int Wp, Rp;
int dy[4] = { 1, 1, -1, -1 };
int dx[4] = { 1, -1, -1, 1 };
int dir;

int main(void)
{
	int i;

	scanf("%d", &T);
	for (i = 1; i <= T; i++)
	{
		Input();
		Operation();
		printf("#%d %d\n", i, ( (Max == 0) ? 1 : Max ) );
	}

	return 0;
}

void Input(void)
{
	int i, j;

	scanf("%d %d", &N, &M);
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			scanf("%1d", &Map[i][j]);
		}
	}
}

void InQ(int yy, int xx, int dd)
{
	Q[Wp].y = yy;
	Q[Wp].x = xx;
	Q[Wp++].direction = dd;
}

NODE * OutQ(void)
{
	return &(Q[Rp++]);
}

void Init_Visit(void)
{
	int i, j;

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			Visit[i][j] = 0;
		}
	}
}

void Operation(void)
{
        int i, j, r;

 	Max = 0;
        for(i = 0; i < N; i++)
        {
                for(j = 0; j < M; j++)
                {
                        if(Map[i][j] == 1)
                        {
                                r = BFS(i, j, 0);
                                if(Max < r) Max = r;
                                Init_Visit();
                        }
                }
        }

}

int BFS(int sy, int sx, int sd)
{
        NODE * out = (NODE *)0x0;
	int i, j;
	int max_shipja;
	int ny, nx, nd;
	int Max_Size = 0;

        Wp = Rp = 0;
        dir = 0;
        InQ(sy, sx, sd);
        Visit[sy][sx] = 1;
        Max_Size = 1;
        min_shipja = MIN( (N - sy) / 2, MIN(M - sx, sx) );

	while(Wp > Rp)
        {
                out = OutQ();
                sy = out->y;
                sx = out->x;
                sd = out->direction;
                for(i = 1; i <= min_shipja; i++)
                {
                        sy += dy[dir];
                        sx += dx[dir];
                        if(Map[sy][sx] )
                }
        }

        return Max_Size;
}

void Print_Visit(void)
{
        int i, j;

	printf("\n");
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			printf("%d ", Visit[i][j]);
		}
		printf("\n");
	}
	printf("\n\n");
}

/*
int BFS(int sy, int sx)
{
	NODE * out = (NODE *)0x0;
	int i;
	int ny, nx;
	int Max_Size = 0;
	int check;
	//int level = 0;
	//if (Map[sy][sx] == 1) Max_Size = 1;

	InQ(sy, sx);
	Visit[sy][sx] = 1;
	//Visit_Check[1]++;

	printf("==================================\n");

	while (Wp > Rp)
	{
		printf("Yop!!\n");
		out = OutQ();
		sy = out->y;
		sx = out->x;
		for (i = 0; i < 4; i++)
		{
			ny = sy + dy[i];
			nx = sx + dx[i];
			if ( ny < 1 || ny > N || nx < 1 || nx > M ) continue;
			if (Visit[ny][nx] == 0 && Map[ny][nx] == 1)
			{
				check = Visit[sy][sx] + 1;
				if (Visit[ny][nx] == check) Max_Size = (check + 1) / 2;
				else
				{
					InQ(ny, nx);
					Visit[ny][nx] = check;
				}
			}
		}
	}

	printf("Max_Size = %d\n", Max_Size);

	return Max_Size;
}*/
#endif




// 20190920
// 2105. [모의 SW 역량테스트] 디저트 카페
#if 0
#include <stdio.h>
#define MAX (22)
#define MAX_DESSERT (101)

void Input(void);
void Operation(void);
void DFS(int L, int y, int x, int cnt);
void Print_List(int cnt);

int T;
int N;
int Cafe[MAX][MAX];
int dy[4] = { 1, 1, -1, -1 };
int dx[4] = { 1, -1, -1, 1 };
int List[MAX];  // 어떤 디저트 메뉴가 들어갔는지 확인하기 위한 배열
int Visit[MAX_DESSERT]; // DFS 함수에서 나오면서 Visit배열은 0으로 초기화되기 때문에 따로 초기화 함수 만들 필요 없음
int Max_Dessert;        // 최종 결과값을 저장하기 위함. 최대값 갱신
int sy, sx;

int main(void)
{
	int i;

	scanf("%d", &T);
	for (i = 1; i <= T; i++)
	{
		Input();
		Operation();
		printf("#%d %d\n", i, ( (Max_Dessert == 0) ? -1 : Max_Dessert ) );
	}

	return 0;
}

void Input(void)
{
	int i, j;

	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Cafe[i][j]);
		}
	}
}

void Operation(void)
{
	int i, j;
	Max_Dessert = 0;

	for (i = 1; i < N; i++)
	{
		for (j = 2; j < N; j++)
		{
			sy = i;         sx = j; // 전역변수로서 DFS 함수 내에서 L이 3 -> 4로 증가할 때 처음 시작한 곳이랑 같은지 판단해주기 위함
			Visit[ Cafe[sy][sx] ] = 1;      // 처음 시작하는 곳 방문 표시
			List[0] = Cafe[sy][sx];

			DFS(0, i, j, 1);

			List[0] = 0;
			Visit[ Cafe[sy][sx] ] = 0;
		}
		if( 2 * (N - i) <= Max_Dessert ) break; // 추가한 가지치기!
	}
}

void DFS(int L, int y, int x, int cnt)
{
        int ny, nx;

        if( L > 0 && y <= sy) return;   // 추가 가지치기! : 1) DFS 시작하자마자 그 다음 칸에 같은 디저트가 있는 경우 2) 좀 크게 돌아서 L == 3일 때, 시작 위치의 y보다 더 위로 올라가려는 경우!
	if (L >= 4)
	{
	        // 처음 보낸 곳에서 만나는지? 조건
		if (y == sy + 1 && x == sx - 1)
		{
			//printf("cnt = %d\n", cnt);
			//Print_List(cnt);
			if (Max_Dessert < cnt) Max_Dessert = cnt;
		}
		return;
	}

	ny = y + dy[L];         nx = x + dx[L];
	if ( ny < 1 || ny > N || nx < 1 || nx > N) return;
        if( Visit[ Cafe[ny][nx] ] == 1)
        {
                // 같은 메뉴가 있었을 때는 꺾음
                DFS(L + 1, y, x, cnt);
        }
        else
        {
                // 같은 메뉴가 없더라도 꺾음
                Visit[ Cafe[ny][nx] ] = 1;
                List[cnt++] = Cafe[ny][nx];

                DFS(L + 1, ny, nx, cnt); // 생각해주지 못한 조건 2 : y, x로 보내면 그냥 꺾게되므로 처음에 잘 안 됨..!!

                List[--cnt] = 0;
                Visit[ Cafe[ny][nx] ] = 0;

                // 같은 메뉴가 없기 때문에 더 감
                Visit[ Cafe[ny][nx] ] = 1;
                List[cnt++] = Cafe[ny][nx];

                DFS(L, ny, nx, cnt); // L = 3일 때도 쭉 가다가 처음 시작한 곳 직전까지 갔으면, 거기서 그 다음 쭉 간 곳에 방문표시가 됐기 때문에 L = 3 -> 4로 바뀔 것!

                List[--cnt] = 0;
                Visit[ Cafe[ny][nx] ] = 0;
        }
}

void Print_List(int cnt)
{
	int i;

	for (i = 0; i < cnt; i++)
	{
		printf("%d ", List[i]);
	}
	printf("\n\n");
}
#endif





// 20190922
// 14503: 로봇 청소기;
#if 0
#include <stdio.h>
#define MAX     (55)

void Input(void);
void Operation(void);
void Print(void);

int N, M;
int r, c;
int dir;
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};
int Map[MAX][MAX];
int Visit[MAX][MAX];
int cnt;

int main(void)
{
        Input();
        Operation();
        Print();

        return 0;
}

void Input(void)
{
        int i, j;

        scanf("%d %d", &N, &M);
        scanf("%d %d %d", &r, &c, &dir);
        for(i = 0; i < N; i++)
        {
                for(j = 0; j < M ;j++)
                {
                        scanf("%d", &Map[i][j]);
                }
        }
}

void Operation(void)
{
        int check;
        int nr, nc;

        cnt = 0;
        while( Map[r][c] != 1 )
        {
                if(Map[r][c] == 0 || Visit[r][c] == 0)
                {
                        cnt++;
                        Visit[r][c] = 2;
			check = 0;
                }

                if(check == 4)
                {
                        r += dy[ (dir + 2) % 4 ];
                        c += dx[ (dir + 2) % 4 ];
                        check = 0;
			continue;
                }

                dir = (dir + 3) % 4;
                nr = r + dy[dir];       nc = c + dx[dir];
                //if(nr < 0 || nr >= N || nc < 0 || nc >= M) continue;
                if( Map[ nr ][ nc ] == 0 && Visit[ nr ][ nc ] == 0 )
                {
                        r = nr;   c = nc;
                        //check = 0;
                }
                else
                {
                        check++;
                }
        }
}

void Print(void)
{
        printf("%d\n", cnt);
}
#endif

// ★광은님 코드 - 깔끔쓰!!! =>내 방식으로 바꿔보자!! ★
// => 조금 더 함수 내 각 블럭들이 확실히 구분된 느낌이고, 각 모듈의 역할을 더욱 명확히 할 수 있었음!!
#if 0
#include <stdio.h>
#define MAX     (55)
#define CLEAN   (2)

void Input(void);
void Operation(void);
void Print(void);

int N, M;
int r, c;
int dir;
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};
int Map[MAX][MAX];
int cnt;

int main(void)
{
        Input();
        Operation();
        Print();

        return 0;
}

void Input(void)
{
        int i, j;

        scanf("%d %d", &N, &M);
        scanf("%d %d %d", &r, &c, &dir);
        for(i = 0; i < N; i++)
        {
                for(j = 0; j < M ;j++)
                {
                        scanf("%d", &Map[i][j]);
                }
        }
}

void Operation(void)
{
        int i;
        int check;
        int nr, nc;

        cnt = 0;
        while( Map[r][c] != 1 )
        {
                if( Map[r][c] == 0 )
                {
                        cnt++;
                        Map[r][c] = CLEAN;
                }

                for(i = 0; i < 4; i++)
                {
                        dir = (dir + 3) % 4;
                        nr = r + dy[dir];
                        nc = c + dx[dir];
                        if( Map[ nr ][ nc ] == 0 )
                        {
                                r = nr;         c = nc;
				break;
                        }
                }

                if(i == 4)
                {
                        r += dy[ (dir + 2) % 4 ];
                        c += dx[ (dir + 2) % 4 ];
                }
        }
}

void Print(void)
{
        printf("%d\n", cnt);
}
#endif`




// 20190922
// 14501: 퇴사    => DFS 본질 더욱 잘 파악하기 ㅠㅠ
#if 0
#include <stdio.h>
#define MAX     (20)

void Input(void);
//void Operation(void);
void DFS(int L, int sum);
void Print(void);

int N;
int Ti[MAX];
int Pi[MAX];
int Max_Profit;
//int Check[MAX][MAX];
//int ROD[MAX];
int List[MAX];
int cnt;

int main(void)
{
        Input();
        //Operation();
        DFS(1, 0);
        Print();

        return 0;
}

void Input(void)
{
        int i, j;
        int flag;

        scanf("%d", &N);
        for(i = 1; i <= N; i++)
        {
                scanf("%d %d", &Ti[i], &Pi[i]);
                //flag = 0;
                //if(i + Ti[i] - 1 > N) flag = 1;
                //for(j = i; j < i + Ti[i]; j++)
                //{
                //        if(flag) break;
                //        Check[i][j] = Ti[i];
                //}
        }
}

void DFS(int L, int sum)
{
        if(L > N)
        {
                if(Max_Profit < sum) Max_Profit = sum;
                return;
        }

        if(L + Ti[L] - 1 <= N)
        {
                List[cnt++] = Pi[L];
                DFS(L + Ti[L], sum + Pi[L]);
                List[--cnt] = 0;
        }
        //else DFS(L + 1, sum);

        DFS(L + 1, sum);
}

/*
void Operation(void)
{
        int i, j, k;
        int sum = 0;
        int flag;

        Max_Profit = 0;
        for(k = 1; k <= N; k++)
        {
                sum = 0;
                for(i = k; i <= N; i++)
                {
                        if(ROD[i] != 0) continue;
                        flag = 0;
                        if(i + Ti[i] - 1 > N) flag = 1;
                        if(flag) continue;
                        for(j = i; j < i + Ti[i]; j++)
                        {
                                ROD[j] = Ti[i];
                        }
                        sum += Pi[i];
                }
                if(Max_Profit < sum) Max_Profit = sum;
        }
}
*/

void Print(void)
{
        /*
        int i, j;

        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        printf("%d ", Check[i][j]);
                }
                printf("\n");
        }
        printf("\n");
        */
        printf("%d\n", Max_Profit);
}
#endif
// 더욱 깔끔한 DFS!!
#if 0
#include <stdio.h>
#define MAX     (20)

void Input(void);
void DFS(int L, int sum);
void Print(void);

int N;
int Ti[MAX];
int Pi[MAX];
int Max_Profit;
int List[MAX];
int cnt;

int main(void)
{
        Input();
        DFS(1, 0);
        Print();

        return 0;
}

void Input(void)
{
        int i, j;

	Max_Profit = 0;
        scanf("%d", &N);
        for(i = 1; i <= N; i++)
        {
                scanf("%d %d", &Ti[i], &Pi[i]);
        }
}

void DFS(int L, int sum)
{
        int i;

#if 01
        // Ver. 1
        if(L > N)
        {
                if(Max_Profit < sum) Max_Profit = sum;
                return;
        }

        if(L + Ti[L] - 1 <= N)
        {
                List[cnt++] = Pi[L];
                DFS(L + Ti[L], sum + Pi[L]);
                List[--cnt] = 0;
        }

        DFS(L + 1, sum);
#else
        // Ver. 2
        if(L > N + 1) return;
        if(Max_Profit < sum) Max_Profit = sum;

        for(i = L; i <= N; i++)
        {
                DFS(i + Ti[L], sum + Pi[L]);
        }
#endif
}
void Print(void)
{
        printf("%d\n", Max_Profit);
}
#endif
