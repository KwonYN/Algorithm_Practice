// 20191015
// 문제 A6: [TEST] 사과나무
/*
	* 사실 N이 10밖에 안되기 때문에 비효율적인 코드라도 뭐 얼마나 비효율적이겠어?
	* 시작점(화재 발생 지역)이 여러개이기 때문에 벽 부수고 이동하기, 미로 탈출과 같은 방법으로 풀 수 없어. 아니 너무 어려워!! 
*/
#if 0
#include <stdio.h>

typedef struct { int y, x; }NODE;
NODE Apple[101];
NODE Fire[101];
NODE Que[288];
NODE List[3];

void Input(void);
void DFS(int L, int s_idx);
void InQ(int yy, int xx);
NODE * OutQ(void);
void Init_Visit(void);
void Print(void);
void Print_Map(void);

int N;
int Map[12][12];
int Visit[12][12];
int fire_cnt;
int apple_cnt;
int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };
int Wp, Rp;
int max_tree;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	DFS(0, 0);
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	fire_cnt = apple_cnt = max_tree = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Map[i][j]);
			if (Map[i][j] == 2)
			{
				Fire[fire_cnt++] = (NODE){ i, j };
			}
			else if (Map[i][j] == 1)
			{
				Apple[apple_cnt++] = (NODE){ i, j };
			}
		}
	}
}

void DFS(int L, int s_idx)
{
	int i, r;

	if (L > 2) return;
	if (L <= 2)
	{
		//Print_Map();
		Init_Visit();
		r = BFS(L);
		if (max_tree < r) max_tree = r;
	}

	for (i = s_idx; i < apple_cnt; i++)
	{
		List[L] = Apple[i];
		Map[ Apple[i].y ][ Apple[i].x ] = 0;

		DFS(L + 1, i + 1);

		Map[ Apple[i].y ][ Apple[i].x ] = 1;
		List[L].y = 0;		List[L].x = 0;
	}
}

int BFS(int cnt)
{
	NODE * out = (NODE *)0x0;
	int i;
	int sy, sx, ny, nx;
	int tree_cnt = apple_cnt - cnt;

	Wp = Rp = 0;
	for (i = 0; i < fire_cnt; i++)
	{
		InQ(Fire[i].y, Fire[i].x);
		Visit[Fire[i].y][Fire[i].x] = 1;
	}

	while (Wp > Rp)
	{
		out = OutQ();
		sy = out->y;		sx = out->x;
		for (i = 0; i < 4; i++)
		{
			ny = sy + dy[i];	nx = sx + dx[i];
			if (ny < 1 || ny > N || nx < 1 || nx > N || Visit[ny][nx]) continue;
			if (Map[ny][nx] == 1)
			{
				InQ(ny, nx);
				Visit[ny][nx] = 1;
				tree_cnt--;
			}
		}
	}

	return tree_cnt;
}

void InQ(int yy, int xx)
{
	Que[Wp].y = yy;
	Que[Wp++].x = xx;
}

NODE * OutQ(void) { return &(Que[Rp++]); }

void Init_Visit(void)
{
	int i, j;

	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			Visit[i][j] = 0;
		}
	}
}

void Print(void)
{
	printf("%d\n", max_tree);
}

void Print_Map(void)
{
	int i, j;

	printf("Print_Map\n");
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			printf("%2d ", Map[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}
#endif
