// 20191014
// 문제 A2: [TEST] 미로탈출
#if 0
#include <stdio.h>
#define MAX	(35)
#define INF	(987654321)

typedef struct { int y, x; int b; }NODE;
NODE Que[MAX * MAX * 4];
NODE start, end;

void Input(void);
int BFS(void);
void Init_Visit(void);
void InQ(int yy, int xx, int bb);
NODE * OutQ(void);
void Print(void);
void Print_Visit(void);

int R, C;
int Map[MAX][MAX];
int Visit[MAX][MAX][4];
int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };
int min_dist;
int Wp, Rp;

int main(void)
{
	//freopen("in.txt", "r", stdin);

	Input();
	Init_Visit();
	min_dist = BFS();
	//Print_Visit();
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	min_dist = INF;
	scanf("%d %d", &R, &C);
	for (i = 1; i <= R; i++)
	{
		for (j = 1; j <= C; j++)
		{
			scanf("%d", &Map[i][j]);
			if (Map[i][j] == 3)
			{
				start.y = i;	start.x = j;
			}
			else if (Map[i][j] == 4)
			{
				end.y = i;		end.x = j;
			}
		}
	}
}

int BFS(void)
{
	NODE * out = (NODE *)0x0;
	int i, check;
	int sy, sx, ny, nx, bb;

	Wp = Rp = 0;
	for (i = 0; i <= 3; i++)
	{
		InQ(start.y, start.x, i);
		Visit[start.y][start.x][i] = 1;
	}
	
	while (Wp > Rp)
	{
		out = OutQ();
		sy = out->y;	sx = out->x;	bb = out->b;
		if ( bb > 3 ) continue;
		if ( sy == end.y && sx == end.x ) return Visit[sy][sx][bb] - 1;
		for (i = 0; i < 4; i++)
		{
			ny = sy + dy[i];		nx = sx + dx[i];
			if ( Map[ny][nx] == 1 ) continue;
			check = Visit[sy][sx][bb] + 1;
			if ( Map[ny][nx] == 2 && bb < 3 )
			{
				if ( Visit[ny][nx][bb + 1] <= check ) continue;
				Visit[ny][nx][bb + 1] = check;
				InQ(ny, nx, bb + 1);
			}
			else if ( Map[ny][nx] == 0 || Map[ny][nx] == 4 ) 	// 그냥 갈 수 있는 공간이라면 그냥 갈 수 있어!
			{
				if ( Visit[ny][nx][bb] <= check ) continue;
				Visit[ny][nx][bb] = check;
				InQ(ny, nx, bb);
			}
		}
	}

	return INF;
}

void Init_Visit(void)
{
	int k, i, j;

	for (k = 0; k <= 3; k++)
	{
		for (i = 1; i <= R; i++)
		{
			for (j = 1; j <= C; j++)
			{
				Visit[i][j][k] = INF;
			}
		}
	}
}

void InQ(int yy, int xx, int bb)
{
	Que[Wp].y = yy;
	Que[Wp].x = xx;
	Que[Wp++].b = bb;
}

NODE * OutQ(void) { return &(Que[Rp++]); }

void Print_Visit(void)
{
	int i, j, b;

	printf("Print_Visit\n");
	for (b = 0; b <= 3; b++)
	{
		printf("[b = %d]\n", b);
		for (i = 1; i <= R; i++)
		{
			for (j = 1; j <= C; j++)
			{
				printf("%3d ", Visit[i][j][b]);
			}
			printf("\n");
		}
	}
	
}

void Print(void)
{
	if (min_dist == INF) min_dist = -1;
	printf("%d\n", min_dist);
}
#endif
