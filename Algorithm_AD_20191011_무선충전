// 20191011
// 무선 충전
/*
        ★★ 교훈! ★★
        조건이 조금 많거나 복잡할 경우에는
        배열(전역변수 선언, 이후에 초기화 필요!!)을 이용하여 체크를 해준 다음에
        따로 함수를 만들어서 체크된 부분에 대해서만 조건을 하나씩 하나씩 적용하여 처리해주는 것이
        더욱 편하다!!
*/
#if 01
#include <stdio.h>
#define MAX	(110)
#define AAX	(10)
#define ABS(a)	( ( (a) < 0 ) ? -(a) : (a) )
#define DIST(a, b)	( ABS(a) + ABS(b) )     // 맨해튼 거리 공식

typedef struct
{
	int x, y;
	int dir[MAX];
	int Charge;
}PERSON;
PERSON A, B;

typedef struct
{
	int x, y;
	int Range;
	int Performance;
}BC;
BC bc[AAX];

void Input(void);
void Move_Get_Sum(void);
int Get_Chk_Sum(void);
void Init_chk(void);

int T;
int M, a;
int dy[5] = { 0, -1, 0, 1, 0 };
int dx[5] = { 0, 0, 1, 0, -1 };
int Max_Sum;
int chka[9], chkb[9];   // 매 시간마다 사람 A와 B가 몇 번 BC(배터리)의 범위 안에 걸리는지 확인하는 배열

int main(void)
{
	int t;

	scanf("%d", &T);
	for (t = 1; t <= T; t++)
	{
		Input();
		Move_Get_Sum();
		printf("#%d %d\n", t, Max_Sum);
	}

	return 0;
}

void Input(void)
{
	int i;

	A.y = 1;	A.x = 1;	A.dir[0] = 0;
	B.y = 10;	B.x = 10;	B.dir[0] = 0;
	scanf("%d %d", &M, &a);
	for (i = 1; i <= M; i++) { scanf("%d", &A.dir[i]); }
	for (i = 1; i <= M; i++) { scanf("%d", &B.dir[i]); }
	for (i = 1; i <= a; i++) { scanf("%d %d %d %d", &bc[i].x, &bc[i].y, &bc[i].Range, &bc[i].Performance); }
}

void Move_Get_Sum(void)
{
	int m, i;
	int adir, bdir;
	int flag;

	Max_Sum = 0;
	for (m = 0; m <= M; m++)
	{
                adir = A.dir[m];	bdir = B.dir[m];
                A.x += dx[adir];	A.y += dy[adir];
                B.x += dx[bdir];	B.y += dy[bdir];        // 매 초마다 A와 B의 좌표를 이동시킴(그 때의 주어진 방향들에 맞추어)

		flag = 0;
		for (i = 1; i <= a; i++)
		{       // A와 B 각각 어떤 배터리들의 범위에 걸리는지 확인한 후, chk 배열에 체크해줌
			if ( DIST( (bc[i].x - A.x), (bc[i].y - A.y) ) <= bc[i].Range )
			{
				chka[i] = 1;
				flag++;
			}
			if ( DIST( (bc[i].x - B.x), (bc[i].y - B.y) ) <= bc[i].Range )
			{
				chkb[i] = 1;
				flag++;
			}
		}
		// 혹시 한 명이라도 배터리의 범위에 걸리지 않으면 굳이 더해주지 않고, 걸린다면 더해준 후, chk배열 초기화
		if( flag )
                {
                        Max_Sum += Get_Chk_Sum();
                        Init_chk();
                }
	}
}

int Get_Chk_Sum(void)
{
	int max_sum = 0;
	int i, j;
	int sA, sB, check;

	for (i = 1; i <= a; i++)
	{
		for (j = 1; j <= a; j++)
		{
			sA = sB = 0;
			if ( chka[i] ) sA = bc[i].Performance;
			if ( chkb[j] ) sB = bc[j].Performance;
			if ( i == j && chka[i] && chkb[j] )
			{
				sA /= 2;		sB /= 2;
			}
			check = sA + sB;
			if ( max_sum < check ) max_sum = check;
		}
	}

	return max_sum;
}

void Init_chk(void)
{
	int i;

	for (i = 1; i <= a; i++)
	{
		chka[i] = chkb[i] = 0;
	}
}
#endif
