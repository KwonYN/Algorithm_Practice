// 20191011
// [BOJ. 5373] 큐빙
#if 0
#include <stdio.h>
#define MAX	(1010)

enum dir{ U, D, F, B, L, R };

typedef struct { char com;	char dir; }COM;
COM C[MAX];

void Set_Data(void);
void Input(void);
void Operation(void);
void Clockwise(int dir);
void Counter_Clockwise(int dir);
void Print(void);


char cube[6][3][3];
/*
= { { { 'w', 'w', 'w' }, { 'w', 'w', 'w' }, { 'w', 'w', 'w' } },
					   { { 'y', 'y', 'y' }, { 'y', 'y', 'y' }, { 'y', 'y', 'y' } },
					   { { 'r', 'r', 'r' }, { 'r', 'r', 'r' }, { 'r', 'r', 'r' } },
					   { { 'o', 'o', 'o' }, { 'o', 'o', 'o' }, { 'o', 'o', 'o' } },
					   { { 'g', 'g', 'g' }, { 'g', 'g', 'g' }, { 'g', 'g', 'g' } },
					   { { 'b', 'b', 'b' }, { 'b', 'b', 'b' }, { 'b', 'b', 'b' } } };
					   */
int T;
int n;

int main(void)
{
	int i;

	freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	for (i = 1; i <= T; i++)
	{
		Set_Data();
		Input();
		Operation();
		Print();
	}

	return 0;
}

void Set_Data(void)
{
	int k, i, j;
	char color[6] = { 'w', 'y', 'r', 'o', 'g', 'b' };

	for (k = U; k <= R; k++)
	{
		for (i = 0; i < 3; i++)
		{
			for (j = 0; j < 3; j++)
			{
				cube[k][i][j] = color[k];
			}
		}
	}
}

void Input(void)
{
	int i;

	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf(" %c%c", &C[i].com, &C[i].dir);
	}
}

void Operation(void)
{
	int i;
	char com1, com2;
	char tmp = '\0';

	for (i = 0; i < n; i++)
	{
		com1 = C[i].com;	com2 = C[i].dir;
		switch ( com1 )
		{
			case 'U':
				if (com2 == '+')
				{
					Clockwise(U);
					tmp = cube[R][0][0];
					cube[R][0][0] = cube[D][2][2];
					cube[D][2][2] = cube[L][0][0];
					cube[L][0][0] = cube[F][0][0];
					cube[F][0][0] = tmp;

					tmp = cube[R][0][1];
					cube[R][0][1] = cube[D][2][1];
					cube[D][2][1] = cube[L][0][1];
					cube[L][0][1] = cube[F][0][1];
					cube[F][0][1] = tmp;

					tmp = cube[R][0][2];
					cube[R][0][2] = cube[D][2][0];
					cube[D][2][0] = cube[L][0][2];
					cube[L][0][2] = cube[F][0][2];
					cube[F][0][2] = tmp;
				}
				else
				{
					Counter_Clockwise(U);
					tmp = cube[D][2][2];
					cube[D][2][2] = cube[R][0][0];
					cube[R][0][0] = cube[F][0][0];
					cube[F][0][0] = cube[L][0][0];
					cube[L][0][0] = tmp;

					tmp = cube[D][2][1];
					cube[D][2][1] = cube[R][0][1];
					cube[R][0][1] = cube[F][0][1];
					cube[F][0][1] = cube[L][0][1];
					cube[L][0][1] = tmp;

					tmp = cube[D][2][0];
					cube[D][2][0] = cube[R][0][2];
					cube[R][0][2] = cube[F][0][2];
					cube[F][0][2] = cube[L][0][2];
					cube[L][0][2] = tmp;
				}
				break;
			case 'D':
				if (com2 == '+')
				{
					Clockwise(D);
					tmp = cube[F][2][2];
					cube[F][2][2] = cube[L][2][2];
					cube[L][2][2] = cube[U][0][0];
					cube[U][0][0] = cube[R][2][2];
					cube[R][2][2] = tmp;

					tmp = cube[F][2][1];
					cube[F][2][1] = cube[L][2][1];
					cube[L][2][1] = cube[U][0][1];
					cube[U][0][1] = cube[R][2][1];
					cube[R][2][1] = tmp;

					tmp = cube[F][2][0];
					cube[F][2][0] = cube[L][2][0];
					cube[L][2][0] = cube[U][0][2];
					cube[U][0][2] = cube[R][2][0];
					cube[R][2][0] = tmp;
			
				}
				else
				{
					Counter_Clockwise(D);
					tmp = cube[F][2][0];
					cube[F][2][0] = cube[R][2][0];
					cube[R][2][0] = cube[U][0][2];
					cube[U][0][2] = cube[L][2][0];
					cube[L][2][0] = tmp;

					tmp = cube[F][2][1];
					cube[F][2][1] = cube[R][2][1];
					cube[R][2][1] = cube[U][0][1];
					cube[U][0][1] = cube[L][2][1];
					cube[L][2][1] = tmp;

					tmp = cube[F][2][2];
					cube[F][2][2] = cube[R][2][2];
					cube[R][2][2] = cube[U][0][0];
					cube[U][0][0] = cube[L][2][2];
					cube[L][2][2] = tmp;
				}
				break;
			case 'F':
				if (com2 == '+')
				{
					Clockwise(F);
					tmp = cube[U][2][0];
					cube[U][2][0] = cube[L][2][2];
					cube[L][2][2] = cube[D][0][2];
					cube[D][0][2] = cube[R][0][0];
					cube[R][0][0] = tmp;

					tmp = cube[U][2][1];
					cube[U][2][1] = cube[L][1][2];
					cube[L][1][2] = cube[D][0][1];
					cube[D][0][1] = cube[R][1][0];
					cube[R][1][0] = tmp;

					tmp = cube[U][2][2];
					cube[U][2][2] = cube[L][0][2];
					cube[L][0][2] = cube[D][0][0];
					cube[D][0][0] = cube[R][2][0];
					cube[R][2][0] = tmp;
				}
				else
				{
					Counter_Clockwise(F);
					tmp = cube[U][2][0];
					cube[U][2][0] = cube[R][0][0];
					cube[R][0][0] = cube[D][0][2];
					cube[D][0][2] = cube[L][2][2];
					cube[L][2][2] = tmp;

					tmp = cube[U][2][1];
					cube[U][2][1] = cube[R][1][0];
					cube[R][1][0] = cube[D][0][1];
					cube[D][0][1] = cube[L][1][2];
					cube[L][1][2] = tmp;

					tmp = cube[U][2][2];
					cube[U][2][2] = cube[R][2][0];
					cube[R][2][0] = cube[D][0][0];
					cube[D][0][0] = cube[L][0][2];
					cube[L][0][2] = tmp;
				}
				break;
			case 'B':
				if (com2 == '+')
				{
					Clockwise(B);
					tmp = cube[U][0][2];
					cube[U][0][2] = cube[R][2][2];
					cube[R][2][2] = cube[D][2][0];
					cube[D][2][0] = cube[L][0][0];
					cube[L][0][0] = tmp;

					tmp = cube[U][0][1];
					cube[U][0][1] = cube[R][1][2];
					cube[R][1][2] = cube[D][2][1];
					cube[D][2][1] = cube[L][1][0];
					cube[L][1][0] = tmp;

					tmp = cube[U][0][0];
					cube[U][0][0] = cube[R][0][2];
					cube[R][0][2] = cube[D][2][2];
					cube[D][2][2] = cube[L][2][0];
					cube[L][2][0] = tmp;
				}
				else
				{
					Counter_Clockwise(B);
					tmp = cube[U][0][2];
					cube[U][0][2] = cube[L][0][0];
					cube[L][0][0] = cube[D][2][0];
					cube[D][2][0] = cube[R][2][2];
					cube[R][2][2] = tmp;

					tmp = cube[U][0][1];
					cube[U][0][1] = cube[L][1][0];
					cube[L][1][0] = cube[D][2][1];
					cube[D][2][1] = cube[R][1][2];
					cube[R][1][2] = tmp;

					tmp = cube[U][0][0];
					cube[U][0][0] = cube[L][2][0];
					cube[L][2][0] = cube[D][2][2];
					cube[D][2][2] = cube[R][0][2];
					cube[R][0][2] = tmp;
				}
				break;
			case 'L':
				if (com2 == '+')
				{
					Clockwise(L);
					tmp = cube[U][0][0];
					cube[U][0][0] = cube[B][2][2];
					cube[B][2][2] = cube[D][0][0];
					cube[D][0][0] = cube[F][0][0];
					cube[F][0][0] = tmp;

					tmp = cube[U][1][0];
					cube[U][1][0] = cube[B][1][2];
					cube[B][1][2] = cube[D][1][0];
					cube[D][1][0] = cube[F][1][0];
					cube[F][1][0] = tmp;

					tmp = cube[U][2][0];
					cube[U][2][0] = cube[B][0][2];
					cube[B][0][2] = cube[D][2][0];
					cube[D][2][0] = cube[F][2][0];
					cube[F][2][0] = tmp;
				}
				else
				{
					Counter_Clockwise(L);
					tmp = cube[U][0][0];
					cube[U][0][0] = cube[F][0][0];
					cube[F][0][0] = cube[D][0][0];
					cube[D][0][0] = cube[B][2][2];
					cube[B][2][2] = tmp;

					tmp = cube[U][1][0];
					cube[U][1][0] = cube[F][1][0];
					cube[F][1][0] = cube[D][1][0];
					cube[D][1][0] = cube[B][1][2];
					cube[B][1][2] = tmp;

					tmp = cube[U][2][0];
					cube[U][2][0] = cube[F][2][0];
					cube[F][2][0] = cube[D][2][0];
					cube[D][2][0] = cube[B][0][2];
					cube[B][0][2] = tmp;
				}
				break;
			default:
				if (com2 == '+')
				{
					Clockwise(R);
					tmp = cube[U][2][2];
					cube[U][2][2] = cube[F][2][2];
					cube[F][2][2] = cube[D][2][2];
					cube[D][2][2] = cube[B][0][0];
					cube[B][0][0] = tmp;

					tmp = cube[U][1][2];
					cube[U][1][2] = cube[F][1][2];
					cube[F][1][2] = cube[D][1][2];
					cube[D][1][2] = cube[B][1][0];
					cube[B][1][0] = tmp;

					tmp = cube[U][0][2];
					cube[U][0][2] = cube[F][0][2];
					cube[F][0][2] = cube[D][0][2];
					cube[D][0][2] = cube[B][2][0];
					cube[B][2][0] = tmp;
				}
				else
				{
					Counter_Clockwise(R);
					tmp = cube[U][2][2];
					cube[U][2][2] = cube[B][0][0];
					cube[B][0][0] = cube[D][2][2];
					cube[D][2][2] = cube[F][2][2];
					cube[F][2][2] = tmp;

					tmp = cube[U][1][2];
					cube[U][1][2] = cube[B][1][0];
					cube[B][1][0] = cube[D][1][2];
					cube[D][1][2] = cube[F][1][2];
					cube[F][1][2] = tmp;

					tmp = cube[U][0][2];
					cube[U][0][2] = cube[B][2][0];
					cube[B][2][0] = cube[D][0][2];
					cube[D][0][2] = cube[F][0][2];
					cube[F][0][2] = tmp;
				}
				break;
		}
	}
}

void Clockwise(int dir)
{
	int i, j;
	char tmp[4][4] = { 0 };

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			tmp[j][2 - i] = cube[dir][i][j];
		}
	}

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			cube[dir][i][j] = tmp[i][j];
		}
	}
}

void Counter_Clockwise(int dir)
{
	int i, j;
	char tmp[4][4] = {0};

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			tmp[2 - j][i] = cube[dir][i][j];
		}
	}

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			cube[dir][i][j] = tmp[i][j];
		}
	}
}

void Print(void)
{
	int i, j;

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%c", cube[U][i][j]);
		}
		printf("\n");
	}

	/*
	for (i = 0; i < n; i++) printf("%c %c ", C[i].com, C[i].dir);
	printf("\n");
	*/
}
#endif
