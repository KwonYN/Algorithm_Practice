// 20191017
// 문제 B1: [TST]로봇
/*
	★★★★
	일반적인 4방체크에 더해 그 인접 정점으로 갈 때의 로봇이 가지고 있던 방향까지 고려해주어야 하므로,
	일반적인 2차원배열(좌표)에 더해 방향의 좋은 경험까지도 기록해줄 수 있도록 한 층을 더 쌓아야 함!!
	=> "3차원 Visit배열!!"
  => 게다가 최소이동을 구하는 것이므로 Greedy 기법 이용!! Visit 배열의 값을 INF로 초기화

	★★★★
	미로탈출과 비슷한 BFS, 3차원 Visit 배열 활용하는 문제다!!
	=> 여기에서는 Visit의 층이 폭탄의 수 (이 문제는 4방향)
*/
// 그래도 이건 잘 푼 것이 아님!!
#if 0
#include <stdio.h>
#define MAX	(110)
#define INF	(987654321)

typedef struct { int y, x, dir; }NODE;
NODE s, e;
NODE Que[MAX * MAX * MAX];

void Input(void);
void BFS(void);
void InQ(int yy, int xx, int dd);
NODE * OutQ(void);
int Chk_Last(int dir);
void Print(void);
void Print_Visit(void);

int M, N;
int Map[MAX][MAX];
int Visit[5][MAX][MAX];
int dy[5] = { 0, 0, 0, 1, -1 };
int dx[5] = { 0, 1, -1, 0, 0 };
int dl[5] = { 0, 4, 3, 1, 2 };
int dr[5] = { 0, 3, 4, 2, 1 };
int db[5] = { 0, 2, 1, 4, 3 };
int min_command;
int Wp, Rp;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	BFS();
	//Print_Visit();
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	min_command = INF;
	scanf("%d %d", &M, &N);
	for (i = 1; i <= M; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Map[i][j]);
		}
	}
	scanf("%d %d %d", &s.y, &s.x, &s.dir);
	scanf("%d %d %d", &e.y, &e.x, &e.dir);
}

void BFS(void)
{
	NODE * out = (NODE *)0x0;
	int dir, i, j, sy, sx, sd;
	int ny, nx, r;

	for (dir = 1; dir < 5; dir++) for (i = 1; i <= M; i++) for (j = 1; j <= N; j++) Visit[dir][i][j] = INF;

	Wp = Rp = 0;
	InQ( s.y, s.x, s.dir );
	Visit[s.dir][s.y][s.x] = 0;
	while (Wp > Rp)
	{
		//printf("Wp = %d, Rp = %d\n", Wp, Rp);
		out = OutQ();
		sy = out->y;	sx = out->x;	sd = out->dir;
		if (sy == e.y && sx == e.x)
		{
			r = Chk_Last(sd);
			if (min_command > Visit[sd][sy][sx] + r) min_command = Visit[sd][sy][sx] + r;
		}
		for (i = 1; i < 5; i++)
		{
			for (j = 1; j <= 3; j++)
			{
				ny = sy + dy[i] * j;	nx = sx + dx[i] * j;
				if (ny < 1 || ny > M || nx < 1 || nx > N || Map[ny][nx]) break;
				if ( Map[ny][nx] ) break;
				if ( sd == i )
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 1) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 1;
				}
				else if ( dl[sd] == i || dr[sd] == i )
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 2) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 2;
				}
				else if ( db[sd] == i )
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 3) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 3;
				}
				InQ(ny, nx, i);
			}
		}
	}
}

int Chk_Last(int dir)
{
	if ( dir == e.dir ) return 0;
	if ( dl[dir] == e.dir || dr[dir] == e.dir ) return 1;
	return 2;
}

void InQ(int yy, int xx, int dd)
{
	Que[Wp].y = yy;
	Que[Wp].x = xx;
	Que[Wp++].dir = dd;
}
NODE * OutQ(void)	 { return &(Que[Rp++]); }

void Print(void)
{
	printf("%d\n", min_command);
}

void Print_Visit(void)
{
	int k, i, j;

	printf("Print_Visit\n");
	for (k = 1; k < 5; k++)
	{
		for (i = 1; i <= M; i++)
		{
			for (j = 1; j <= N; j++)
			{
				if (Visit[i][j] == INF) printf(" X ");
				else printf("%2d ", Visit[k][i][j]);
			}
			printf("\n");
		}
		printf("\n");
	}
	printf("\n");
}


// 직전에 짰던 개 더럽고 개 복잡하고 다신 이렇게 하면 안되겠다고 생각할만한 풀이..!!
/*
while (Wp > Rp)
{
//printf("Wp = %d, Rp = %d\n", Wp, Rp);
out = OutQ();
sy = out->y;	sx = out->x;	sd = out->dir;
//printf("y = %d, x = %d, dir = %d, com = %d\n\n", sy, sx, sd, Visit[sy][sx]);
if (sy == e.y && sx == e.x)
{
r = Visit[sy][sx];
if (sd == e.dir)
{
if (min_command > r) min_command = r;
}
else if (dl[sd] == e.dir)
{
if (min_command > r + 1) min_command = r + 1;
}
else if (dl[dl[sd]] == e.dir)
{
if (min_command > r + 2) min_command = r + 2;
}
else if (dr[sd] == e.dir)
{
if (min_command > r + 1) min_command = r + 1;
}
continue;
}
for (i = 1; i < 5; i++)	// i 방향을 체크하는 중 (Map 기준)
{
ny = sy + dy[i];		nx = sx + dx[i];
if ( ny < 1 || ny > M || nx < 1 || nx > N || Map[ny][nx] ) continue; // 먼저 그 방향이 1로 막혀있는지 확인!

printf("현재 위치 좌표 : y = %d, x = %d\n", sy, sx);
printf("현재 바라보고 있는 방향 : %d\n", sd);
printf("현재 인접 체크하고 있는 방향 : %d\n\n", i);
getch();

nny = sy + ddy[i];		nnx = sx + ddx[i];
nnny = sy + dddy[i];	nnnx = sx + dddx[i];
// i방향의 바로 인접한 칸에 궤도가 설치되어 있다.
// 그런데 로봇이 그 방향을 바라보고 있다.
if (i == sd)
{
	// 이미 더 적은 Visit(명령 횟수)로 그 곳을 방문한 것이 아니라면, 가본다.
	if (Visit[ny][nx] > Visit[sy][sx] + 1)
	{
		Visit[ny][nx] = Visit[sy][sx] + 1;
		InQ(ny, nx, sd);
	}
	// 그런데 바로 인접한 칸이 아니라 Go k = 2(두 번째로 인접한 칸에 궤도 설치)?
	if (nny >= 1 && nny <= M && nnx >= 1 && nnx <= N && !Map[nny][nnx])
	{
		// 이미 더 적은 Visit(명령 횟수)로 그 곳을 방문한 것이 아니라면, 가본다.
		if (Visit[nny][nnx] > Visit[sy][sx] + 1)
		{
			Visit[nny][nnx] = Visit[sy][sx] + 1;
			InQ(nny, nnx, sd);
		}
		// 그런데 바로 인접한 칸이 아니라 Go k = 3(세 번째로 인접한 칸에 궤도 설치)?
		if (nnny >= 1 && nnny <= M && nnnx >= 1 && nnnx <= N && !Map[nnny][nnnx])
		{
			// 이미 더 적은 Visit(명령 횟수)로 그 곳을 방문한 것이 아니라면, 가본다.
			if (Visit[nnny][nnnx] > Visit[sy][sx] + 1)
			{
				Visit[nnny][nnnx] = Visit[sy][sx] + 1;
				InQ(nnny, nnnx, sd);
			}
		}
	}
}
else // 바로 i방향으로 인접한 칸에 궤도가 설치되어 있는데, 로봇은 그 방향을 바라보고 있지 않아. 그래도 그 방향 체크하는거 끝이니 이번에 보내야 함!
{
	if (dl[sd] == i)	// 왼쪽으로 한 번 틀었더니 같은 방향?
	{
		//printf("i = %d, sd = %d, dl[sd] = %d\n", i, sd, dl[sd]);
		if (Visit[ny][nx] > Visit[sy][sx] + 2)
		{
			Visit[ny][nx] = Visit[sy][sx] + 2;
			InQ(ny, nx, dl[sd]);
		}
		if (nny >= 1 && nny <= M && nnx >= 1 && nnx <= N && !Map[nny][nnx])
		{
			if (Visit[nny][nnx] > Visit[sy][sx] + 2)
			{
				Visit[nny][nnx] = Visit[sy][sx] + 2;
				InQ(nny, nnx, dl[sd]);
			}
			if (nnny >= 1 && nnny <= M && nnnx >= 1 && nnnx <= N && !Map[nnny][nnnx])
			{
				if (Visit[nnny][nnnx] > Visit[sy][sx] + 2)
				{
					Visit[nnny][nnnx] = Visit[sy][sx] + 2;
					InQ(nnny, nnnx, dl[sd]);
				}
			}
		}
	}
	else if (dl[dl[sd]] == i)		// 뒤 돌아야해?
	{
		if (Visit[ny][nx] > Visit[sy][sx] + 3)
		{
			Visit[ny][nx] = Visit[sy][sx] + 3;
			InQ(ny, nx, dl[dl[sd]]);
		}
		if (nny >= 1 && nny <= M && nnx >= 1 && nnx <= N && !Map[nny][nnx])
		{
			if (Visit[nny][nnx] > Visit[sy][sx] + 3)
			{
				Visit[nny][nnx] = Visit[sy][sx] + 3;
				InQ(nny, nnx, dl[dl[sd]]);
			}
			if (nnny >= 1 && nnny <= M && nnnx >= 1 && nnnx <= N && !Map[nnny][nnnx])
			{
				if (Visit[nnny][nnnx] > Visit[sy][sx] + 3)
				{
					Visit[nnny][nnnx] = Visit[sy][sx] + 3;
					InQ(nnny, nnnx, dl[dl[sd]]);
				}
			}
		}
	}
	else if (dr[sd] == i)		// 오른쪽으로?
	{
		if (Visit[ny][nx] > Visit[sy][sx] + 2)
		{
			Visit[ny][nx] = Visit[sy][sx] + 2;
			InQ(ny, nx, dr[sd]);
		}
		if (nny >= 1 && nny <= M && nnx >= 1 && nnx <= N && !Map[nny][nnx])
		{
			if (Visit[nny][nnx] > Visit[sy][sx] + 2)
			{
				Visit[nny][nnx] = Visit[sy][sx] + 2;
				InQ(nny, nnx, dr[sd]);
			}
			if (nnny >= 1 && nnny <= M && nnnx >= 1 && nnnx <= N && !Map[nnny][nnnx])
			{
				if (Visit[nnny][nnnx] > Visit[sy][sx] + 2)
				{
					Visit[nnny][nnnx] = Visit[sy][sx] + 2;
					InQ(nnny, nnnx, dr[sd]);
				}
			}
		}
	}
}
		}
	}
*/
#endif

// 다시 풀어봄! (다시 해봐야 함!)
#if 0
#include <stdio.h>
#define MAX	(110)
#define INF	(987654321)

typedef struct { int y, x, dir; }NODE;
NODE s, e;
NODE Que[MAX * MAX * MAX];

void Input(void);
void BFS(void);
void InQ(int yy, int xx, int dd);
NODE * OutQ(void);
int Chk_Last(int dir);
void Print(void);
void Print_Visit(void);

int M, N;
int Map[MAX][MAX];
int Visit[5][MAX][MAX];
int dy[5] = { 0, 0, 0, 1, -1 };
int dx[5] = { 0, 1, -1, 0, 0 };
int dl[5] = { 0, 4, 3, 1, 2 };
int dr[5] = { 0, 3, 4, 2, 1 };
int db[5] = { 0, 2, 1, 4, 3 };
int min_command;
int Wp, Rp;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	BFS();
	//Print_Visit();
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	min_command = INF;
	scanf("%d %d", &M, &N);
	for (i = 1; i <= M; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Map[i][j]);
		}
	}
	scanf("%d %d %d", &s.y, &s.x, &s.dir);
	scanf("%d %d %d", &e.y, &e.x, &e.dir);
}

void BFS(void)
{
	NODE * out = (NODE *)0x0;
	int dir, i, j, sy, sx, sd;
	int ny, nx, r;

	Wp = Rp = 0;
	InQ(s.y, s.x, s.dir);
	Visit[s.dir][s.y][s.x] = 1;
	while (Wp > Rp)
	{
		//printf("Wp = %d, Rp = %d\n", Wp, Rp);
		out = OutQ();
		sy = out->y;	sx = out->x;	sd = out->dir;
		if (sy == e.y && sx == e.x)
		{
			r = Chk_Last(sd);
			
		}
		for (i = 1; i < 5; i++)
		{

		}
		for (i = 1; i < 5; i++)
		{
			for (j = 1; j <= 3; j++)
			{
				ny = sy + dy[i] * j;	nx = sx + dx[i] * j;
				if (ny < 1 || ny > M || nx < 1 || nx > N || Map[ny][nx]) break;
				if (Map[ny][nx]) break;
				if (sd == i)
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 1) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 1;
				}
				else if (dl[sd] == i || dr[sd] == i)
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 2) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 2;
				}
				else if (db[sd] == i)
				{
					if (Visit[i][ny][nx] <= Visit[sd][sy][sx] + 3) continue;
					Visit[i][ny][nx] = Visit[sd][sy][sx] + 3;
				}
				InQ(ny, nx, i);
			}
		}
	}
}

int Chk_Last(int dir)
{
	if (dir == e.dir) return 0;
	if (dl[dir] == e.dir || dr[dir] == e.dir) return 1;
	return 2;
}

void InQ(int yy, int xx, int dd)
{
	Que[Wp].y = yy;
	Que[Wp].x = xx;
	Que[Wp++].dir = dd;
}
NODE * OutQ(void)	 { return &(Que[Rp++]); }

void Print(void)
{
	printf("%d\n", min_command);
}

void Print_Visit(void)
{
	int k, i, j;

	printf("Print_Visit\n");
	for (k = 1; k < 5; k++)
	{
		for (i = 1; i <= M; i++)
		{
			for (j = 1; j <= N; j++)
			{
				if (Visit[i][j] == INF) printf(" X ");
				else printf("%2d ", Visit[k][i][j]);
			}
			printf("\n");
		}
		printf("\n");
	}
	printf("\n");
}
#endif
