// 20191005
// [SWEA. 2117] [모의 SW 역량테스트] 홈 방범 서비스
#if 0
#include <stdio.h>
#define MAX     (25)
#define COST(i) ((i) * (i) + ((i) - 1) * ((i) - 1))

typedef struct
{
        int cost;
        int house_cnt;
}SERVICE;
SERVICE Service[ MAX * 3 ];

typedef struct
{
        int y, x;
}NODE;
NODE Q[ MAX * MAX * 2 ];

void Set_Data(void);
void Init(void);
void Input(void);
void Operation(void);
void InQ(int yy, int xx);
NODE * OutQ(void);
void FF_BFS(int sy, int sx);
int Calc_Max(void);
void Print_Struct(void);

int T;
int N, M;
int City[MAX][MAX];
int Wp, Rp;
int cnt_house;
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

int main(void)
{
        int i;

        scanf("%d", &T);
        Set_Data();
        for(i = 1; i <= T; i++)
        {
                Init();
                Input();
                Operation();
                printf("#%d %d\n", i, Calc_Max());
                Print_Struct();
        }

        return 0;
}

void Set_Data(void)
{
        int i;
        for(i = 1; i <= MAX * 2; i++) Service[i].cost = COST(i);
}

void Init(void)
{
        int i;
        for(i = 1; i <= N * 2 - 1; i++) Service[i].house_cnt = 0;
}

void Input(void)
{
        int i, j;

        cnt_house = 0;
        scanf("%d %d", &N, &M);
        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        scanf("%d", &City[i][j]);
                        if( City[i][j] ) cnt_house++;
                }
        }
}

void Operation(void)
{
        int i, j;

        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        FF_BFS(i, j);
                }
        }
}

void InQ(int yy, int xx)
{
        Q[Wp].y = yy;
        Q[Wp++].x = xx;
}

NODE * OutQ(void)
{
        return &(Q[Rp++]);
}

void FF_BFS(int sy, int sx)
{
        NODE * out = (NODE *)0x0;
        int i, tmp, cnt = 0;
        int ny, nx;
        int Visit[MAX][MAX] = {0};      // Visit 배열 내의 값이 K, 즉 서비스 영역의 크기가 됨!
        int flag = 0;

        Wp = Rp = 0;
        InQ(sy, sx);
        Visit[sy][sx] = 1;
        if( City[sy][sx] == 1 )
        {
                cnt++;
                Service[1].house_cnt = 1;
        }

        while(Wp > Rp)
        {
                out = OutQ();
                sy = out->y;    sx = out->x;
                for(i = 0; i < 4; i++)
                {
                        ny = sy + dy[i];        nx = sx + dx[i];
                        if(ny < 1 || ny > N || nx < 1 || nx > N || Visit[ny][nx] ) continue;
                        Visit[ny][nx] = Visit[sy][sx] + 1;
                        InQ(ny, nx);
                        if( City[ny][nx] == 1 )
                        {
                                cnt++;
                                tmp = Visit[ny][nx];
                                if( Service[ tmp ].house_cnt < cnt )
                                {
                                        Service[ tmp ].house_cnt = cnt;
                                }
                                if( cnt == cnt_house )
                                {
                                        flag = 1;
                                        break;
                                }
                        }
                }
                if(flag) break;
        }
}

int Calc_Max(void)
{
        int i, max_house = 0;

        for(i = 1; i <= N * 2 - 1; i++)
        {
                if( Service[i].house_cnt * M - Service[i].cost >= 0)    // 손해 안 봄
                {
                        if(max_house < Service[i].house_cnt)    // 서비스 영역 내 가장 많은 집의 수 갱신
                        {
                                max_house = Service[i].house_cnt;
                        }
                }
        }

        return max_house;
}

void Print_Struct(void)
{
        int i;

        for(i = 0; i <= N * 2 - 1; i++)
        {
                printf("%5d%5d  ==> %d\n", Service[i].cost, Service[i].house_cnt, Service[i].house_cnt * M - Service[i].cost);
        }
}
#endif
