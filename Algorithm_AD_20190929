// 20190927 - 1
// [BOJ. 14890] 경사로
#if 0
#include <stdio.h>
#define MAX	(102)
#define ABS(a) ( ((a) < 0) ? -(a) : (a) )

void Input(void);
void Operation(void);
void Print(void);

int N, L;
int Map[MAX][MAX];
int cnt;

int main(void)
{
	Input();
	Operation();
	Print();

	return 0; 
}

void Input(void)
{
	int i, j;

	cnt = 0;
	scanf("%d %d", &N, &L);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Map[i][j]);
		}
	}
}

void Operation(void)
{
	int i, j;
	int floor, check;

	// 왼쪽에서 오른쪽!!
	for (i = 1; i <= N; i++)
	{
		floor = 1;
		for (j = 1; j < N; j++)
		{
			check = Map[i][j] - Map[i][j + 1];	// (+) -> 감소하고 있음, (-) -> 증가하고 있음
			if (ABS(check) > 1) break;
			else if (check == 0) floor++;
			else  // 차이가 1 !
			{
				if (check == -1) // 높아짐
				{
					if (floor >= L) floor = 1;
					else break;
				}
				else // 낮아짐 : 추가적인 판단이 필요( "ㄱㅡΓ" 의 경우, "ㅡ"(낮은 부분의 바닥)에 해당되는 최소 개수가 2 * L개임!! )
				{
					if (floor < 0) break;	// ★계속 계단식으로 내려가는 경우를 잡기 위함!!★
					floor = 1 - L;
				}
			}
		}
		if (j == N && floor >= 0) cnt++;
		// ★제일 마지막에도 이 조건을 붙여주지 않는다면, 계속 계단식으로 내려가는 경우를 잘 잡을 수 없음★
	}

	// 위에서 아래로 (좌 -> 우와 방향만 다르고 다 똑같음!)
	for (i = 1; i <= N; i++)
	{
		floor = 1;
		for (j = 1; j < N; j++)
		{
			check = Map[j][i] - Map[j + 1][i];	// (+) -> 감소하고 있음, (-) -> 증가하고 있음
			if (ABS(check) > 1) break;
			else if (check == 0) floor++;
			else  // 차이가 1 !
			{
				if (check == -1) // 높아짐
				{
					if (floor >= L) floor = 1;
					else break;
				}
				else // 낮아짐
				{
					if (floor < 0) break;	// ★계속 계단식으로 내려가는 경우를 잡기 위함!!★
					floor = 1 - L;
				}
			}
		}
		if (j == N && floor >= 0) cnt++;
		// ★제일 마지막에도 이 조건을 붙여주지 않는다면, 계속 계단식으로 내려가는 경우를 잘 잡을 수 없음★
	}
}

void Print(void)
{
	printf("%d\n", cnt);
}
#endif




// 20190927 - 2
// [BOJ. 14891] 톱니바퀴
#if 0
#include <stdio.h>
#define MAX     (101)

// 톱니바퀴
typedef struct
{
	int ARR[8];
	int dir;
}SAW;
SAW S[5];

// K개의 명령어를 담는 틀
typedef struct
{
	int saw;
	int dir;
}COMMAND;
COMMAND C[MAX];

void Input(void);
void Operation(void);
void Rotate_Clock(void);
void Print(void);

int K;
int Result[5][2] = { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 4 }, { 0, 8 } };	// 최종 결과 점수 판단 위함!
int Final_Score;

int main(void)
{
	Input();
	Operation();
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	for (i = 1; i <= 4; i++)
	{
		for (j = 0; j < 8; j++)
		{
			scanf("%1d", &S[i].ARR[j]);
		}
	}
	scanf("%d", &K);
	for (i = 1; i <= K; i++) scanf("%d %d", &C[i].saw, &C[i].dir);
}

void Operation(void)
{
	int i, n;

	for (i = 1; i <= K; i++)
	{
		n = C[i].saw;
		S[n].dir = C[i].dir;
		// 오른쪽으로
		while (n < 4)
		{
			if (S[n].ARR[2] != S[n + 1].ARR[6])
			{
				S[n + 1].dir = S[n].dir * (-1);
			}
			else S[n + 1].dir = 0;
			n++;
		}

		n = C[i].saw;
		// 왼쪽으로
		while (n > 1)
		{
			if (S[n].ARR[6] != S[n - 1].ARR[2])
			{
				S[n - 1].dir = S[n].dir * (-1);
			}
			else S[n - 1].dir = 0;
			n--;
		}
		Rotate_Clock();
	}
}

void Rotate_Clock(void)
{
	int i, j, tmp;

	for (i = 1; i <= 4; i++)
	{
		if (S[i].dir == 1)
		{
			tmp = S[i].ARR[7];
			for (j = 6; j >= 0; j--)
			{
				S[i].ARR[j + 1] = S[i].ARR[j];
			}
			S[i].ARR[0] = tmp;
		}
		else if (S[i].dir == -1)
		{
			tmp = S[i].ARR[0];
			for (j = 1; j <= 7; j++)
			{
				S[i].ARR[j - 1] = S[i].ARR[j];
			}
			S[i].ARR[7] = tmp;
		}
	}
}

void Print(void)
{
	int i, j;
	Final_Score = 0;

	for (i = 1; i <= 4; i++)
	{
		Final_Score += Result[i][S[i].ARR[0]];
	}
	printf("%d\n", Final_Score);
}
#endif

// 20190930
// [BOJ. 15662] 톱니바퀴(2)
#if 0
#include <stdio.h>
#define MAX     (1001)

typedef struct
{
	int ARR[8];
	int dir;
}SAW;
SAW S[MAX];

typedef struct
{
	int saw;
	int dir;
}COMMAND;
COMMAND C[MAX];

void Input(void);
void Operation(void);
void Rotate_Clock(void);
void Print(void);

int T;
int K;
int Final_Score;

int main(void)
{
	Input();
	Operation();
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	scanf("%d", &T);
	for (i = 1; i <= T; i++)
	{
		for (j = 0; j < 8; j++)
		{
			scanf("%1d", &S[i].ARR[j]);
		}
	}
	scanf("%d", &K);
	for (i = 1; i <= K; i++) scanf("%d %d", &C[i].saw, &C[i].dir);
}

void Operation(void)
{
	int i, n;

	for (i = 1; i <= K; i++)
	{
		n = C[i].saw;
		S[n].dir = C[i].dir;
		// 오른쪽으로
		while (n < T)
		{
			if (S[n].ARR[2] != S[n + 1].ARR[6])
			{
				S[n + 1].dir = S[n].dir * (-1);
			}
			else S[n + 1].dir = 0;
			n++;
		}

		n = C[i].saw;
		// 왼쪽으로
		while (n > 1)
		{
			if (S[n].ARR[6] != S[n - 1].ARR[2])
			{
				S[n - 1].dir = S[n].dir * (-1);
			}
			else S[n - 1].dir = 0;
			n--;
		}
		Rotate_Clock();
	}
}

void Rotate_Clock(void)
{
	int i, j, tmp;

	for (i = 1; i <= T; i++)
	{
		if (S[i].dir == 1)
		{
			tmp = S[i].ARR[7];
			for (j = 6; j >= 0; j--)
			{
				S[i].ARR[j + 1] = S[i].ARR[j];
			}
			S[i].ARR[0] = tmp;
		}
		else if (S[i].dir == -1)
		{
			tmp = S[i].ARR[0];
			for (j = 1; j <= 7; j++)
			{
				S[i].ARR[j - 1] = S[i].ARR[j];
			}
			S[i].ARR[7] = tmp;
		}
	}
}

void Print(void)
{
	int i;
	Final_Score = 0;

	for (i = 1; i <= T; i++)
	{
		Final_Score += S[i].ARR[0];
	}
	printf("%d\n", Final_Score);
}
#endif
