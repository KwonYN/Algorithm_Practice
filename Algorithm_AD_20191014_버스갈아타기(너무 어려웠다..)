// 20191014
// [ 문제 A0: [TST]버스 갈아타기 ]
/*
		인접 배열을 활용하는 방법을 잘 모르는 것 같음!
*/
/*
	// ★인접 만들기★
	for (b = 1; b < i; b++)
	{
		if (Bus[b].y2 < Bus[i].y1) continue;
		if (Bus[b].x2 < Bus[i].x1) continue;
		if (Bus[b].y1 > Bus[i].y2) continue;
		if (Bus[b].x1 > Bus[i].x2) continue;
		A[Bus[b].id][Bus[i].id] = A[Bus[i].id][Bus[b].id] = 1;
	}
*/
#if 0
#include <stdio.h>
#define KMAX		(5010)
#define INF			(987654321)

typedef struct { int sy, sx, ey, ex, id; }NODE;
NODE BUS[KMAX];
NODE ME;

void Input(void);
void Find_First_Last_Bus(void);
void BFS(void);
void Print(void);
void Print_Injub(void);
void Print_Chk(void);

int N, M;
int K;
int min_bus;
int chk_s[KMAX];
int chk_e[KMAX];
int s_cnt, e_cnt;
int Injub[KMAX][KMAX];
int Q[KMAX];
int Wp, Rp;
int chk[KMAX];

int main(void)
{
	freopen("in.txt", "r", stdin);

	Input();
	Find_First_Last_Bus();
	BFS();

	Print_Injub();
	Print_Chk();	

	Print();

	return 0;
}

void Input(void)
{
	int i, j;
	int sy, sx, dy, dx;
	int min_ix, max_ix, min_iy, max_iy, iid;
	int min_jx, max_jx, min_jy, max_jy, jid;

	scanf("%d %d", &M, &N);
	scanf("%d", &K);
	for (i = 1; i <= K; i++)
	{
		scanf("%d %d %d %d %d", &iid, &sx, &sy, &dx, &dy);
		BUS[i].id = iid;
		if (sy <= dy)
		{
			BUS[i].sy = min_iy = sy;
			BUS[i].ey = max_iy = dy;
		}
		else
		{
			BUS[i].sy = min_iy = dy;
			BUS[i].ey = max_iy = sy;
		}
		if (sx <= dx)
		{
			BUS[i].sx = min_ix = sx;
			BUS[i].ex = max_ix = dx;
		}
		else
		{
			BUS[i].sx = min_ix = dx;
			BUS[i].ex = max_ix = sx;
		}

		for (j = 1; j < i; j++)
		{
			jid = BUS[j].id;
			min_jy = BUS[j].sy;		max_jy = BUS[j].ey;
			min_jx = BUS[j].sx;		max_jx = BUS[j].ex;

			if (max_jy < min_iy) continue;
			if (max_jx < min_ix) continue;
			if (min_jy > max_iy) continue;
			if (min_jx > max_ix) continue;
			Injub[iid][jid] = Injub[jid][iid] = 1;
		}
			/*
			if ( min_ix == max_ix )	// i는 수직선
			{
				if ( min_jx == max_jx )	// j는 수직선
				{
					if ( min_jx != min_ix ) continue;
					if ( min_iy <= min_jy && min_jy <= max_iy || min_iy <= max_jy && max_jy <= max_iy )
					{
						Injub[iid][jid] = Injub[jid][iid] = 1;
					}
				}
				else if ( min_jy == max_jy )	// j는 수평선
				{
					if ( min_jx <= min_ix && min_ix <= max_jx && min_iy <= min_jy && min_jy <= max_iy )
					{
						Injub[iid][jid] = Injub[jid][iid] = 1;
					}
				}				
			}
			else if ( min_iy == max_iy )	// i는 수평선
			{
				if (min_jx == max_jx)	// j는 수직선
				{
					if (min_jy <= min_iy && min_iy <= max_jy && min_ix <= min_jx && min_jx <= max_ix)
					{
						Injub[iid][jid] = Injub[jid][iid] = 1;
					}
				}
				else if (min_jy == max_jy)	// j는 수평선
				{
					if (min_jy != min_iy) continue;
					if (min_ix <= min_jx && min_jx <= max_ix || min_iy <= max_jy && max_jy <= max_iy)
					{
						Injub[iid][jid] = Injub[jid][iid] = 1;
					}
				}
			}
			*/
	}
	scanf("%d %d %d %d ", &ME.sx, &ME.sy, &ME.ex, &ME.ey);
}

void Find_First_Last_Bus(void)
{
	int i;
	int sy, sx, ey, ex, id;
	int msy = ME.sy, msx = ME.sx, mey = ME.ey, mex = ME.ex;

	s_cnt = e_cnt = 0;
	min_bus = INF;
	for (i = 1; i <= K; i++)	// 각 노선에 대하여
	{
		id = BUS[i].id;
		sx = BUS[i].sx;		ex = BUS[i].ex;
		sy = BUS[i].sy;		ey = BUS[i].ey;		
		// 시작점이 어떤 버스 노선에 걸리는지
		if ( sx == ex && sx == msx )	// 수직선일 때 && 시작위치의 x좌표와 같을 때
		{
			if ( sy <= msy && msy <= ey ) chk_s[s_cnt++] = id;
		}
		else if ( sy == ey && sy == msy )	// 수평선일 때 && 시작위치의 y좌표와 같을 때
		{
			if ( sx <= msx && msx <= ex ) chk_s[s_cnt++] = id;
		}
		// 도착점이 어떤 버스 노선에 걸리는지
		if ( sx == ex && sx == mex )			// 수직선일 때 && 도착위치의 x좌표와 같을 때
		{
			if ( sy <= mey && mey <= ey ) chk_e[e_cnt++] = id;
		}
		else if ( sy == ey && sy == mey )	// 수평선일 때 && 도착위치의 y좌표와 같을 때
		{
			if ( sx <= mex && mex <= ex ) chk_e[e_cnt++] = id;
		}
	}
}

void BFS(void)
{
	int out, i, e, id, check;

	Wp = Rp = 0;
	for (i = 0; i < s_cnt; i++)
	{
		Q[Wp++] = chk_s[i];
		chk[ chk_s[i] ] = 1;
	}

	while (Wp > Rp)
	{
		out = Q[Rp++];
		//printf("Wp = %d, Rp = %d, out = %d\n", Wp, Rp, out);
		for (i = 1; i <= K; i++)
		{
			id = BUS[i].id;			check = chk[out] + 1;
			if ( Injub[out][id] && !chk[id] )
			{
				chk[id] = check;
				Q[Wp++] = id;
			}
		}
		//for (int q = 1; q <= K; q++) printf("%d ", chk[q]);
		//printf("\n");
	}
	for (e = 0; e < e_cnt; e++)
	{
		if (min_bus > chk[ chk_e[e] ]) min_bus = chk[ chk_e[e] ];
	}
}

void Print(void)
{
	printf("%d\n", min_bus);
}

void Print_Injub(void)
{
	int i, j;

	printf("Print_Injub\n");
	for (i = 1; i <= K; i++)
	{
		for (j = 1; j <= K; j++)
		{
			printf("%d ", Injub[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void Print_Chk(void)
{
	int i;

	for (i = 0; i < s_cnt; i++) printf("%d ", chk_s[i]);
	printf("\n");
	for (i = 0; i < e_cnt; i++) printf("%d ", chk_e[i]);
	printf("\n");
}
#endif

// 광은님 ver.
#if 0
#include <stdio.h>

#define MAX (5010)

typedef struct st {
	int id;
	int x1;
	int y1;
	int x2;
	int y2;
	char d;
} BUS;

int X, Y, K;
int SX, SY, DX, DY;
int wp, rp;
int A[MAX][MAX];
int Visit[MAX];
BUS Bus[MAX];
BUS Queue[MAX];

void InQueue(BUS bus) { Queue[wp++] = bus; }
BUS OutQueue(void) { return Queue[rp++]; }

void Input(void);
int BFS(void);

int main(void)
{
	Input();
	printf("%d\n", BFS());

	for (int i = 1; i <= K; i++)
	{
		for (int j = 1; j <= K; j++)
		{
			printf("%d ", A[i][j]);
		}
		printf("\n");
	}

	return 0;
}

void Input(void)
{
	int i;
	int b;
	int id, x1, x2, y1, y2;

	scanf("%d %d %d", &X, &Y, &K);

	for (i = 1; i <= K; i++)
	{
		// 입력
		scanf("%d %d %d %d %d", &id, &x1, &y1, &x2, &y2);
		Bus[i].id = id;
		if (x1 < x2)
		{
			Bus[i].x1 = x1;
			Bus[i].x2 = x2;
		}
		else
		{
			Bus[i].x1 = x2;
			Bus[i].x2 = x1;
		}
		if (y1 < y2)
		{
			Bus[i].y1 = y1;
			Bus[i].y2 = y2;
		}
		else
		{
			Bus[i].y1 = y2;
			Bus[i].y2 = y1;
		}
		// 인접 만들기
		for (b = 1; b < i; b++)
		{
			if (Bus[b].y2 < Bus[i].y1) continue;
			if (Bus[b].x2 < Bus[i].x1) continue;
			if (Bus[b].y1 > Bus[i].y2) continue;
			if (Bus[b].x1 > Bus[i].x2) continue;
			A[Bus[b].id][Bus[i].id] = A[Bus[i].id][Bus[b].id] = 1;
		}
	}

	scanf("%d %d %d %d", &SX, &SY, &DX, &DY);
}

int BFS(void)
{
	BUS out;
	int i;

	// 시작점 넣기
	wp = rp = 0;
	for (i = 1; i <= K; i++)
	{
		if (((Bus[i].x1 <= DX) && (DX <= Bus[i].x2)) && ((Bus[i].y1 <= DY) && (DY <= Bus[i].y2)))
		{
			Bus[i].d = 1;
		}
		if (((Bus[i].x1 <= SX) && (SX <= Bus[i].x2)) && ((Bus[i].y1 <= SY) && (SY <= Bus[i].y2)))
		{
			InQueue(Bus[i]);
			Visit[Bus[i].id] = 1;
		}
	}

	// go
	while (rp < wp)
	{
		out = OutQueue();
		if (out.d == 1) return Visit[out.id];
		for (i = 1; i <= K; i++)
		{
			if (Visit[Bus[i].id] != 0) continue;
			if (A[out.id][Bus[i].id] == 1)
			{
				Visit[Bus[i].id] = Visit[out.id] + 1;
				InQueue(Bus[i]);
			}
		}
	}

	return -1;
}
#endif
