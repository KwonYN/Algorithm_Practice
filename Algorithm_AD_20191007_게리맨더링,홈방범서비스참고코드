// 20191007
// [BOJ. 17471] 게리맨더링
#if 01
#include <stdio.h>
#define MAX	(14)
#define INF	(987654321)
#define ABS(a)	( ((a) < 0) ? -(a) : (a) )

void Input(void);
void DFS(int L, int s_idx);
int BFS(int flag);
void Print(void);

int N;
int population[MAX];
int Injub[MAX][MAX];
int Visit[MAX];
int Q[MAX];
int Min_Diff;
int sumA, sumB;
int Wp, Rp;
int cnt;

int main(void)
{
	Input();
	DFS(1, 1);
	Print();

	return 0;
}

void Input(void)
{
	int i, tmp, ttmp;

	Min_Diff = INF;         cnt = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++) scanf("%d", &population[i]);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &tmp);
		Injub[i][0] = tmp;
		while (tmp--)
		{
			scanf("%d", &ttmp);
			Injub[i][ttmp] = Injub[ttmp][i] = 1;
		}
	}
}

void DFS(int L, int s_idx)
{
	int i, j, check;

	if (Min_Diff == 0) return;
	if (L > N) return;
	if (L > 1)
	{
		//for(int k = 1; k <= N; k++) printf("%d ", Visit[k]);  printf("\n");
		if (BFS(1) && BFS(0))
		{
			sumA = sumB = 0;
			for (j = 1; j <= N; j++)
			{
				if (Visit[j]) sumA += population[j];
				else sumB += population[j];
			}
			check = ABS(sumA - sumB);
			if (Min_Diff > check) Min_Diff = check;
		}
	}

	for (i = s_idx; i <= N; i++)
	{
		if (Visit[i]) continue;
		Visit[i] = 1;   cnt++;
		DFS(L + 1, i + 1);
		Visit[i] = 0;   cnt--;
	}
}

int BFS(int flag)
{
	int Visit2[MAX] = { 0 };
	int count;
	int i, s, out;

	Wp = Rp = 0;
	for (i = 1; i <= N; i++)
	{
		if (Visit[i] == flag)
		{
			s = i;
			break;
		}
	}

	Visit2[s] = 1;
	Q[Wp++] = s;
	count = 1;
	while (Wp > Rp)
	{
		out = Q[Rp++];
		for (i = 1; i <= N; i++)
		{
			if (Visit[i] == flag && Visit2[i] == 0 && Injub[out][i] == 1)
			{
				Visit2[i] = 1;
				Q[Wp++] = i;
				count++;
			}
		}
	}

	if (flag && count == cnt) return 1;
	if (!flag && count == N - cnt) return 1;
	return 0;
}

void Print(void)
{
	/*
	for (int i = 0; i <= N; i++)
	{
		for (int j = 0; j <= N; j++)
		{
			printf("%d ", Injub[i][j]);
		}
		printf("\n");
	}
	printf("\n");
	*/

	printf("%d\n", ((Min_Diff == INF) ? -1 : Min_Diff));
}
#endif




// 홈 방범 서비스 참고 코드
// for문 + 배열 활용
#if 0
#include <stdio.h>

typedef struct st
{
	int r;
	int c;
}POS;
#define MAX (21)
void Set_Data(void);
int Operation(void);

int N, M;
int cost[30];
POS House[MAX*MAX];
int su_h;
int MAP[MAX][MAX];
int max_t;
int max;

int main(void)
{
	int t, T;

	scanf("%d", &T);

	for (t = 1; t < 30; t++)
	{
		cost[t] = t*t + (t - 1)*(t - 1);
	}

	for (t = 1; t <= T; t++)
	{
		Set_Data();

		printf("#%d %d\n", t, Operation());
	}
}

void Set_Data(void)
{
	int i, j;

	scanf("%d %d", &N, &M);

	su_h = 1;

	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &MAP[i][j]);
			if (MAP[i][j] == 1)
			{
				House[su_h].r = i;
				House[su_h++].c = j;
			}
		}
	}

	su_h--;

	for (i = 1; cost[i] <= su_h*M; i++);
	max_t = i - 1;

	max = 0;
}

int Operation(void)
{
	int i, j, u, x;
	int cover[50][MAX][MAX] = { 0 };
	int w, h;
	int distance;
	int cnt;

	for (i = 1; i <= N; i++) //마름모의 가운데점을 잡는다. 
	{
		for (j = 1; j <= N; j++)
		{
			for (u = 1; u <= su_h; u++)
			{
				h = i - House[u].r;
				if (h < 0) h *= -1;

				w = j - House[u].c;
				if (w < 0) w *= -1;

				distance = w + h;
				cover[distance][i][j]++;
				//가운뎃점을 i,j로 잡았을 때 각 거리 크기의 마름모가
				//몇 채를 잡을 수 있는지 
			}

			cnt = 0;
			for (x = 1; x <= max_t; x++) //마름모 크기
			{
				cnt += cover[x - 1][i][j]; //거리로 쟀으니 1 빼줘야함.
				if (cnt > max && cost[x] <= cnt*M) max = cnt;
			}
		}
	}

	return max;
}
#endif

