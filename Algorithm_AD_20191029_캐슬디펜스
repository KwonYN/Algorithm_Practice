// 20191029
// [BOJ. 17135] 캐슬 디펜스
#if 01
#include <stdio.h>
#define ABS(a)	( ( (a) < 0 ) ? -(a) : (a) )
#define DIST(a, b, c, d)	( ABS( (a) - (b) ) + ABS( (c) - (d) ) )
#define MAX	(20)
#define INF	(987654321)

typedef struct { int y, x, flag; }ENEMY;
ENEMY List[MAX * MAX];
ENEMY en[MAX * MAX];

typedef struct { int y, x; }GUNG;
GUNG gu[5];

void Input(void);
void Set_Data(void);
void DFS(int L, int s_idx);
void Copy_List(void);
int Game(void);

void Print_Struct(void);
void Print_gu(void);
void Print_die(void);

int N, M, D;
int die[5];
int en_cnt;
int max_kill;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	Set_Data();
	//Print_Struct();
	DFS(1, 1);
	printf("%d\n", max_kill);

	return 0;
}

void Input(void)
{
	int i, j, tmp;

	en_cnt = 0;
	scanf("%d %d %d", &N, &M, &D);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= M; j++)
		{
			scanf("%d", &tmp);
			if (tmp) List[++en_cnt] = (ENEMY) { i, j, 0 };
		}
	}
	//printf("en_cnt = %d\n", en_cnt);
}

void Set_Data(void)
{
	int i, j;
	ENEMY tmp = (ENEMY) { 0, 0, 0 };

	max_kill = 0;	en[0] = (ENEMY) { INF, INF, 0 };
	for (i = 1; i < en_cnt; i++)
	{
		for (j = i + 1; j <= en_cnt; j++)
		{
			if ( List[i].x < List[j].x )	// x좌표 기준으로 내림차순으로 정렬!
			{
				tmp = List[j];
				List[j] = List[i];
				List[i] = tmp;
			}
		}
	}
}

void DFS(int L, int s_idx)
{
	int i, r;

	if (L > 3)
	{
		/*
		Print_gu();
		getch();
		*/
		Copy_List();
		r = Game();
		/*
		printf("r = %d\n", r);
		getch();
		*/
		if ( max_kill < r ) max_kill = r;
		return;
	}

	for (i = s_idx; i <= M; i++)
	{
		gu[L] = (GUNG) { N + 1, i };
		DFS(L + 1, i + 1);
		gu[L] = (GUNG) { 0, 0 };
	}
}

void Copy_List(void)
{
	int i;

	for (i = 1; i <= en_cnt; i++) en[i] = List[i];
}

int Game(void)
{
	//int cnt = 0;
	int kill = 0, castle = 0;
	int i, j, min_dist, dist_diff;
	
	while ( kill + castle != en_cnt )	// 왜 무한루프??
	{
		//++cnt;
		/*
		printf("kill = %d, castle = %d\n", kill, castle);
		getch();
		*/
		for (i = 1; i <= 3; i++) die[i] = 0;
		for (i = 1; i <= 3; i++)
		{
			min_dist = INF;
			for (j = 1; j <= en_cnt; j++)
			{
				if ( en[j].flag != 0 ) continue;	// 0이 아니라는 것은 죽었다는 뜻
				dist_diff = DIST(en[j].y, gu[i].y, en[j].x, gu[i].x);	// 맨해튼거리 일단 구해놓음
				if ( dist_diff <= D )									// 그 거리가 주어진 D 이하라면 죽일 수 있음
				{
					if ( min_dist > dist_diff )							// 가장 왼쪽에 있는 애를 찾기 위해서!
					{
						min_dist = dist_diff;
						die[i] = j;		// 죽을 대상의 idx를 저장!
					}
					else if ( min_dist == dist_diff )
					{
						if ( en[ die[i] ].x > en[j].x ) die[i] = j;		// 새로 들어온 애의 x값이 더 작다는 것은 더 왼쪽에 있다는 뜻!
					}
				}
			}
		}
		//printf("맨해튼 거리로 죽일 놈의 idx 찾음\n");
		//Print_die();

		for (i = 1; i <= 3; i++)
		{
			if ( en[ die[i] ].flag != 0 || die[i] == 0 ) continue;
			en[ die[i] ].flag = 1;
			kill++;
		}
		//printf("궁수가 죽임\n");

		for (j = 1; j <= en_cnt; j++)
		{
			if ( en[j].flag != 0 ) continue;
			if ( ++en[j].y == N + 1 )
			{
				en[j].flag = 1;
				castle++;
			}
		}
		//printf("성에 부딪혀 죽음\n\n\n");
	}
	//printf("%d\n", cnt);
	return kill;
}

void Print_Struct(void)
{
	int i;
	printf("Print_Struct\n");
	for (i = 1; i <= en_cnt; i++) printf("%d ", List[i].x);
	printf("\n");
}

void Print_gu(void)
{
	int i;
	printf("Print_gu\n");
	for (i = 1; i <= 3; i++) printf("%d ", gu[i].x);
	printf("\n");
}

void Print_die(void)
{
	int i;

	for (i = 0; i <= 3; i++) printf("[%d] %d ", i, die[i]);
}
#endif
