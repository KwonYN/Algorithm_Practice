// 14501: 퇴사
// 더욱 깔끔한 DFS!!
#if 0
#include <stdio.h>
#define MAX     (20)

void Input(void);
void DFS(int L, int sum);
void Print(void);

int N;
int Ti[MAX];
int Pi[MAX];
int Max_Profit;
int List[MAX];
int cnt;

int main(void)
{
	Input();
	DFS(1, 0);
	Print();

	return 0;
}

void Input(void)
{
	int i, j;

	Max_Profit = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		scanf("%d %d", &Ti[i], &Pi[i]);
	}
}

void DFS(int L, int sum)
{
	int i;

#if 01
	// Ver. 1
	if (L > N)
	{
		if (Max_Profit < sum) Max_Profit = sum;
		return;
	}

	if (L + Ti[L] - 1 <= N)
	{
		List[cnt++] = Pi[L];
		DFS(L + Ti[L], sum + Pi[L]);
		List[--cnt] = 0;
	}

	DFS(L + 1, sum);
#else
	// Ver. 2
	if (L > N + 1) return;
	if (Max_Profit < sum) Max_Profit = sum;

	for (i = L; i <= N; i++)
	{
		DFS(i + Ti[L], sum + Pi[L]);
	}
#endif
}
void Print(void)
{
	printf("%d\n", Max_Profit);
}
#endif



// 20190923
// 문제 E9: [TST] Snake	: 몇 초 후에 게임이 끝나는지!!!!
#if 0
#include <stdio.h>
#define MM	(101)
#define MAX	(10001)
#define FRUIT		(3)
#define SNAKE		(2)
#define WALLORSNAKE	(1)
#define BLANK		(0)

typedef struct
{
	int T;
	char C;
}COMMAND;
COMMAND Com[MAX];

typedef struct
{
	int y, x;
}NODE;
NODE Q[MM * MM * 10];


void Input(void);
void Operation(void);
void Print(void);

int Map[MM][MM];
int N, K, L;
int time;
int Wp, Rp;

int main(void)
{
	Input();
	Operation();
	Print();

	return 0;
}

void Input(void)
{
	int i, r, c;

	scanf("%d", &N);
	for (i = 0; i <= N + 1; i++)
	{
		Map[0][i] = Map[i][0] = Map[N + 1][i] = Map[i][N + 1] = WALLORSNAKE;
	}

	scanf("%d", &K);
	for (i = 1; i <= K; i++)
	{
		scanf("%d %d", &r, &c);
		Map[r][c] = FRUIT;
	}

	scanf("%d", &L);
	for (i = 1; i <= L; i++) scanf("%d %c", &Com[i].T, &Com[i].C);
}

void Operation(void)
{
	int i, j;
	int order = 1;
	int dir = 0;
	int dy[4] = { 0, -1, 0, 1 };
	int dx[4] = { 1, 0, -1, 0 };
	int HEAD;
	int tmp;
	Wp = Rp = 0;

	time = 0;
	Q[Wp].y = 1;
	Q[Wp++].x = 1;
	HEAD = Wp - 1;

	for (;;)
	{
		Map[Q[HEAD].y][Q[HEAD].x] = WALLORSNAKE;
		Q[Wp].y = Q[HEAD].y + dy[dir];
		Q[Wp++].x = Q[HEAD].x + dx[dir];
		HEAD = Wp - 1;
		if (Map[Q[HEAD].y][Q[HEAD].x] == WALLORSNAKE) break;

		if (Map[Q[HEAD].y][Q[HEAD].x] != FRUIT)
		{
			Map[Q[Rp].y][Q[Rp].x] = BLANK;
			Rp++;
		}

		time++;
		if (time == Com[order].T)
		{
			if (Com[order].C == 'L')
			{
				dir = (dir + 1) % 4;
			}
			else
			{
				dir = (dir + 3) % 4;
			}
			order++;
		}

		/* 디버깅을 위해서!
		printf("====================\n");
		printf("time = %d\n", time);
		for (i = 0; i <= N + 1; i++)
		{
		for (j = 0; j <= N + 1; j++)
		{
		printf("%d ", Map[i][j]);
		}
		printf("\n");
		}
		printf("\n");
		printf("Length = %d\n", Wp - Rp);
		printf("====================\n");
		*/
	}
}

void Print(void)
{
	printf("%d\n", time + 1);
}
#endif




// 20190923
// 2382. [모의 SW 역량테스트] 미생물 격리
#if 01
#include <stdio.h>
#define MAX_MIC (1001)
#define MAX (110)

typedef struct
{
        int y, x;
        int count;
        int dir;
}MIC;
MIC mic[MAX_MIC];

typedef struct
{
        int num;
        int max;
        int dir;
}CHECK;
CHECK chk[MAX][MAX];

void Input(void);
void InQ(int yy, int xx, int n, int d);
MIC * OutQ(void);
void IInnQQ(void);
void Init_Check(void);
void Operation(void);
int Print(void);

int T;
int N, K, M;
int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
int Wp, Rp;

int main(void)
{
        int i, j;

        scanf("%d", &T);
        for(i = 1; i <= T; i++)
        {
                Input();
                Operation();
                printf("#%d %d\n", i, Print());
        }

        return 0;
}

void Input(void)
{
        int r, c, tcount, tdir;
        int i;

        Wp = Rp = 0;
        scanf("%d %d %d", &N, &M, &K);
        for(i = 1; i <= K; i++)
        {
                scanf("%d %d %d %d", &r, &c, &tcount, &tdir);
                switch(tdir)
                {
                        case 1:
                                tdir = 0;
                                break;
                        case 2:
                                tdir = 2;
                                break;
                        case 3:
                                tdir = 1;
                                break;
                        default:
                                tdir = 3;
                                break;
                }
                InQ(r, c, tcount, tdir);
        }
}

void InQ(int yy, int xx, int n, int d)
{
        mic[Wp].y = yy;
        mic[Wp].x = xx;
        mic[Wp].count = n;
        mic[Wp++].dir = d;
}

MIC * OutQ(void)
{
        return &(mic[Rp++]);
}

void Operation(void)
{
        int i;
        int ny, nx, nc, nd;
        MIC * out = (MIC *)0x0;

        while( M-- )
        {
                for(i = 0; i < Wp; i++)
                {
                        out = OutQ();
                        nd = out->dir;
                        ny = out->y + dy[nd];
                        nx = out->x + dx[nd];
                        nc = out->count;
                        if(ny == 0 || ny == N - 1 || nx == 0 || nx == N - 1)
                        {
                                nc /= 2;
                                nd = (nd + 2) % 4;
                        }
                        chk[ny][nx].num += nc;
                        if(chk[ny][nx].max < nc)
                        {
                                chk[ny][nx].max = nc;
                                chk[ny][nx].dir = nd;
                        }
                }
                IInnQQ();
                Init_Check();
        }
}

void IInnQQ(void)
{
        int i, j;

        Wp = Rp = 0;
        for(i = 0; i < N; i++)
        {
                for(j = 0; j < N; j++)
                {
                        if(chk[i][j].num > 0)
                        {
                                InQ(i, j, chk[i][j].num, chk[i][j].dir);
                        }
                }
        }
}

void Init_Check(void)
{
        int i, j;

        for(i = 0; i < N; i++)
        {
                for(j = 0; j < N; j++)
                {
                        chk[i][j].num = 0;
                        chk[i][j].max = 0;
                        chk[i][j].dir = 0;
                }
        }
}

int Print(void)
{
        int i, j, sum = 0;

        for(i = 0; i < Wp; i++)
        {
                sum += mic[i].count;
        }

        return sum;
}
#endif
